// Best fit memory allocation 

#include<stdio.h>
#define MAX_BLOCKS 25

void main() {
    int fragment[MAX_BLOCKS], blocks[MAX_BLOCKS], processes[MAX_BLOCKS], i, j, num_blocks, num_processes, temp, lowest = 10000;
    static int block_flags[MAX_BLOCKS], process_flags[MAX_BLOCKS], internal_fragmentation = 0;

    printf("\n\tMemory Management Scheme - Best Fit");
    printf("\nEnter the number of blocks:");
    scanf("%d", &num_blocks);
    printf("Enter the number of processes:");
    scanf("%d", &num_processes);
    printf("\nEnter the size of the blocks:\n");

    for (i = 1; i <= num_blocks; i++) {
        printf("Block %d:", i);
        scanf("%d", &blocks[i]);
        process_flags[i] = i;
    }

    printf("Enter the size of the processes:\n");

    for (i = 1; i <= num_processes; i++) {
        printf("Process %d:", i);
        scanf("%d", &processes[i]);
    }

    int y, m, z, temp1, flag;
    for (y = 1; y <= num_blocks; y++) {
        for (z = y; z <= num_blocks; z++) {
            if (blocks[y] > blocks[z]) {
                temp = blocks[y];
                blocks[y] = blocks[z];
                blocks[z] = temp;
                temp1 = process_flags[y];
                process_flags[y] = process_flags[z];
                process_flags[z] = temp1;
            }
        }
    }

    int block_flags[MAX_BLOCKS];
    int external_fragmentation = 0;

    printf("\n\nProcess_No\tProcess_Size\tBlock_No\tBlock_Size\tFragment\n");

    for (i = 1; i <= num_processes; i++) {
        flag = 1;

        for (j = 1; j <= num_blocks; j++) {
            if (processes[i] <= blocks[j]) {
                block_flags[j] = 1;
                printf("%-15d\t%-15d\t%-15d\t%-15d\t", i, processes[i], process_flags[j], blocks[j]);
                blocks[j] = blocks[j] - processes[i];
                internal_fragmentation = internal_fragmentation + blocks[j];
                printf("%-15d\n", blocks[j]);
                break;
            } else {
                block_flags[j] = 0;
                flag++;
            }
        }

        if (flag > num_blocks)
            printf("%-15d\t%-15d\t%-15s\t%-15s\t%-15s\n", i, processes[i], "WAIT...", "WAIT...", "WAIT...");
    }

    printf("Internal Fragmentation = %d", internal_fragmentation);

    for (j = 1; j <= num_blocks; j++) {
        if (block_flags[j] != 1)
            external_fragmentation = external_fragmentation + blocks[j];
    }

    printf("\nExternal Fragmentation = %d\n", external_fragmentation);
}


// First  fit memory allocation 

#include<stdio.h>
#define MAX_BLOCKS 25

void main()
{
	int fragment[MAX_BLOCKS], blocks[MAX_BLOCKS], processes[MAX_BLOCKS], i, j, num_blocks, num_processes, temp, highest = 0;
	static int bf[MAX_BLOCKS], ff[MAX_BLOCKS];
	int flag, flagn[MAX_BLOCKS], internal_fragmentation = 0, external_fragmentation = 0;

	printf("\n\tMemory Management Scheme - First Fit");
	printf("\nEnter the number of blocks:");
	scanf("%d", &num_blocks);
	printf("Enter the number of processes:");
	scanf("%d", &num_processes);
	printf("\nEnter the size of the blocks:\n");

	for (i = 1; i <= num_blocks; i++) {
		printf("Block %d:", i);
		scanf("%d", &blocks[i]);
		ff[i] = i;
	}
	printf("Enter the size of the processes:\n");

	for (i = 1; i <= num_processes; i++) {
		printf("Process %d:", i);
		scanf("%d", &processes[i]);
	}
	int x = 1;
	printf("\n\nProcess_No\tProcess_Size\tBlock_No\tBlock_Size\tFragment\n");
	for (i = 1; i <= num_processes; i++)
	{
		flag = 1;
		for (j = x; j <= num_blocks; j++)
		{
			if (processes[i] <= blocks[j]) {
				flagn[j] = 1;
				printf("%-15d\t%-15d\t%-15d\t%-15d\t", i, processes[i], ff[j], blocks[j]);
				blocks[j] = blocks[j] - processes[i];
				internal_fragmentation = internal_fragmentation + blocks[j];
				printf("%-15d\n", blocks[j]);
				break;
			}
			else {
				flagn[j] = 0;
				x = 1;
				flag++;
			}
		}
		if (flag > num_blocks)
			printf("%-15d\t%-15d\t%-15s\t%-15s\t%-15s\n", i, processes[i], "WAIT...", "WAIT...", "WAIT...");
	}
	printf("Internal Fragmentation = %d", internal_fragmentation);
	for (j = 1; j <= num_blocks; j++) {
		if (flagn[j] != 1)
			external_fragmentation = external_fragmentation + blocks[j];
	}
	printf("\nExternal Fragmentation = %d\n", external_fragmentation);
}

// Worst Fit 
#include<stdio.h>
#define max 25

void main()
{
    int frag[max], b[max], f[max], i, j, nb, nf, temp, highest = 0;
    static int bf[max], ff[max];
    int flag, fragi = 0;

    printf("\n\tMemory Management Scheme - Worst Fit");
    printf("\nEnter the number of blocks:");
    scanf("%d", &nb);
    printf("Enter the number of Processes:");
    scanf("%d", &nf);
    printf("\nEnter the size of the blocks:-\n");

    for (i = 1; i <= nb; i++) {
        printf("Block %d:", i);
        scanf("%d", &b[i]);
        ff[i] = i;
    }

    printf("Enter the size of the Processes :-\n");

    for (i = 1; i <= nf; i++) {
        printf("Process %d:", i);
        scanf("%d", &f[i]);
    }

    int y, z, temp1;

    /* Sorting for worst and best fit only */
    for (y = 1; y <= nb; y++) {
        for (z = y; z <= nb; z++) {
            if (b[y] < b[z]) {
                temp = b[y];
                b[y] = b[z];
                b[z] = temp;
                temp1 = ff[y];
                ff[y] = ff[z];
                ff[z] = temp1;
            }
        }
    }

    int flagn[max];
    int fragx = 0;

    /* Following is the code for next fit */
    printf("\n\nProcess_No\tProcess_Size\tBlock_No\tBlock_Size\tFragment\n");

    for (i = 1; i <= nf; i++) {
        flag = 1;
        for (j = 1; j <= nb; j++) {
            if (f[i] <= b[j]) {
                flagn[j] = 1;
                printf("%-15d\t%-15d\t%-15d\t%-15d\t", i, f[i], ff[j], b[j]);
                b[j] = b[j] - f[i];
                fragi = fragi + b[j];
                printf("%-15d\n", b[j]);
                break;
            } else {
                flagn[j] = 0;
                flag++;
            }
        }
        if (flag > nb)
            printf("%-15d\t%-15d\t%-15s\t%-15s\t%-15s\n", i, f[i], "WAIT...", "WAIT...", "WAIT...");
    }

    printf("Internal Fragmentation = %d", fragi);

    for (j = 1; j <= nb; j++) {
        if (flagn[j] != 1)
            fragx = fragx + b[j];
    }

    printf("\nExternal Fragmentation = %d\n", fragx); /* Next fit ends */
}

