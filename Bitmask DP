#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

int n;
vector<int> a;
vector<vector<int>> dp;

int go(int mask, int prev) {
    if (mask == (1 << n) - 1) {
        return 0;
    }

    if (dp[mask][prev] != -1) {
        return dp[mask][prev];
    }

    int ans = 0;
    for (int i = 0; i < n; ++i) {
        if ((mask & (1 << i)) == 0) {
            int c1 = __gcd(a[i], a[prev]) + go(mask ^ (1 << i), i);
            ans = max(ans, c1);
        }
    }

    dp[mask][prev] = ans;

    return ans;
}

int main() {
    cin >> n;
    a.resize(n);
    dp.resize(1 << n, vector<int>(n, -1));

    for (int i = 0; i < n; ++i) {
        cin >> a[i];
    }

    int ans1 = 0;
    for (int i = 0; i < n; ++i) {
        ans1 = max(ans1, go(1 << i, i));
    }

    cout << ans1 << endl;

    return 0;
}
