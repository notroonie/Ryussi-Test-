class LRUCache {
public:
    class Node {
    public:
        int key;
        int val;
        Node *next;
        Node *prev;
        Node(int _key, int _val) {
            key = _key;
            val = _val;
        }
    };

    Node *head = new Node(-1, -1);
    Node *tail = new Node(-1, -1);

    int capacity;
    unordered_map<int, Node *> cache;

    LRUCache(int cap) {
        capacity = cap;
        head->next = tail;
        tail->prev = head;
    }

    void addNode(Node *newNode) {
        Node *temp = head->next;
        newNode->next = temp;
        newNode->prev = head;
        head->next = newNode;
        temp->prev = newNode;
    }

    void deleteNode(Node *delNode) {
        Node *delPrev = delNode->prev;
        Node *delNext = delNode->next;
        delPrev->next = delNext;
        delNext->prev = delPrev;
    }

    int get(int key) {
        if (cache.find(key) != cache.end()) {
            Node *resNode = cache[key];
            int res = resNode->val;
            cache.erase(key);
            deleteNode(resNode);
            addNode(resNode);
            cache[key] = head->next;
            return res;
        }

        return -1;
    }

    void put(int key, int value) {
        if (cache.find(key) != cache.end()) {
            Node *existingNode = cache[key];
            cache.erase(key);
            deleteNode(existingNode);
        }
        if (cache.size() == capacity) {
            cache.erase(tail->prev->key);
            deleteNode(tail->prev);
        }

        addNode(new Node(key, value));
        cache[key] = head->next;
    }
};
